// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatFieldNames          = builder.RawFieldNames(&Chat{})
	chatRows                = strings.Join(chatFieldNames, ",")
	chatRowsExpectAutoSet   = strings.Join(stringx.Remove(chatFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chatRowsWithPlaceHolder = strings.Join(stringx.Remove(chatFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	chatModel interface {
		Insert(ctx context.Context, data *Chat) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Chat, error)
		Update(ctx context.Context, data *Chat) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChatModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Chat struct {
		Id            int64        `db:"id"`             // 主键id
		Chatname      string       `db:"chatname"`       // 用户名
		Password      string       `db:"password"`       // 密码
		FollowCount   int64        `db:"follow_count"`   // 关注数
		FollowerCount int64        `db:"follower_count"` // 粉丝数
		IsFollow      int64        `db:"is_follow"`      // 是否关注
		CreatedAt     time.Time    `db:"created_at"`     // 创建时间
		UpdatedAt     time.Time    `db:"updated_at"`     // 更新时间
		DeletedAt     sql.NullTime `db:"deleted_at"`     // 删除时间
		Email         string       `db:"email"`          // 邮箱地址
		Signature     string       `db:"signature"`      // 个性签名
		AvatarUrl     string       `db:"avatar_url"`     // 头像地址
		BackgroundUrl string       `db:"background_url"` // 背景地址
	}
)

func newChatModel(conn sqlx.SqlConn) *defaultChatModel {
	return &defaultChatModel{
		conn:  conn,
		table: "`chat`",
	}
}

func (m *defaultChatModel) withSession(session sqlx.Session) *defaultChatModel {
	return &defaultChatModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`chat`",
	}
}

func (m *defaultChatModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultChatModel) FindOne(ctx context.Context, id int64) (*Chat, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatRows, m.table)
	var resp Chat
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatModel) Insert(ctx context.Context, data *Chat) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, chatRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Chatname, data.Password, data.FollowCount, data.FollowerCount, data.IsFollow, data.DeletedAt, data.Email, data.Signature, data.AvatarUrl, data.BackgroundUrl)
	return ret, err
}

func (m *defaultChatModel) Update(ctx context.Context, data *Chat) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Chatname, data.Password, data.FollowCount, data.FollowerCount, data.IsFollow, data.DeletedAt, data.Email, data.Signature, data.AvatarUrl, data.BackgroundUrl, data.Id)
	return err
}

func (m *defaultChatModel) tableName() string {
	return m.table
}
