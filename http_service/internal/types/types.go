// Code generated by goctl. DO NOT EDIT.
package types

type PingReq struct {
}

type PingResp struct {
	StatusCode int32  `json:"status_code"`
	StatusMsg  string `json:"status_msg,optional"`
	Data       string `json:"data"`
}

type LoginReq struct {
	Username  string `json:"username,optional"`
	UserEmail string `json:"user_email,optional"`
	Password  string `json:"password"`
}

type LoginResp struct {
	StatusCode int32  `json:"status_code"`
	StatusMsg  string `json:"status_msg,optional"`
	Token      string `json:"token"`
	UserID     int64  `json:"user_id"`
}

type RegisterReq struct {
	Username  string `json:"username"`
	UserEmail string `json:"user_email"`
	Password  string `json:"password"`
}

type RegisterResp struct {
	StatusCode int32  `json:"status_code"`
	StatusMsg  string `json:"status_msg,optional"`
	Token      string `json:"token"`
	UserID     int64  `json:"user_id"`
}

type UserInfoReq struct {
	Token  string `form:"token"`
	UserID int64  `form:"user_id"`
}

type UserInfoResp struct {
	StatusCode int32    `json:"status_code"`
	StatusMsg  string   `json:"status_msg,optional"`
	UserInfo   UserInfo `json:"user_info"`
}

type UserInfo struct {
	Id            int64  `json:"id"`
	Name          string `json:"name"`
	Email         string `json:"email"`
	AvatarUrl     string `json:"avatar_url,optional"`
	BackgroundUrl string `json:"background_url"`
	FollowCount   int64  `json:"follow_count,optional"`
	FollowerCount int64  `json:"follower_count,optional"`
	IsFollow      bool   `json:"is_follow"`
	Signature     string `json:"signature,optional"`
	WorkCount     int64  `json:"work_count,optional"`
}

type FeedReq struct {
	LatestTime string `form:"latest_time,optional"`
	Token      string `form:"token,optional"`
}

type FeedResp struct {
	StatusCode int32       `json:"status_code,optional"`
	StatusMsg  string      `json:"status_msg"`
	NextTime   int64       `json:"next_time"`
	VideoList  []VideoInfo `json:"video_list,optional"`
}

type VideoInfo struct {
	ID            int64    `json:"id"`
	Title         string   `json:"title"`
	AuthorInfo    UserInfo `json:"author_info"`
	CoverURL      string   `json:"cover_url"`
	PlayURL       string   `json:"play_url"`
	CommentCount  int64    `json:"comment_count"`
	LikeCount     int64    `json:"like_count"`
	IsLike        bool     `json:"is_like"`
	FavoriteCount int64    `json:"favorite_count"`
	IsFavorite    bool     `json:"is_favorite"`
}

type PublishActionReq struct {
	Token string `form:"token,omitempty"`
	Title string `form:"title"`
}

type PublishActionResp struct {
	StatusCode int32  `json:"status_code"`
	StatusMsg  string `json:"status_msg,optional"`
}

type PublishListReq struct {
	Token  string `form:"token"`
	UserID int64  `form:"user_id"`
}

type PublishListResp struct {
	StatusCode int32       `json:"status_code"`
	StatusMsg  string      `json:"status_msg,optional"`
	VideoList  []VideoInfo `json:"video_list"`
}

type FavoriteActionReq struct {
	ActionType int32  `form:"action_type"`
	Token      string `form:"token"`
	VideoID    int64  `form:"video_id"`
}

type FavoriteActionResp struct {
	StatusCode int32  `json:"status_code"`
	StatusMsg  string `json:"status_msg,optional"`
}

type FavoriteListReq struct {
	Token  string `form:"token"`
	UserID int64  `form:"user_id"`
}

type FavoriteListResp struct {
	StatusCode int32       `json:"status_code"`
	StatusMsg  string      `json:"status_msg,optional"`
	VideoList  []VideoInfo `json:"video_list"`
}

type CommentActionReq struct {
	ActionType  int32  `form:"action_type"`
	CommentID   int64  `form:"comment_id,optional"`
	CommentText string `form:"comment_text,optional"`
	Token       string `form:"token"`
	VideoID     int64  `form:"video_id"`
}

type CommentActionResp struct {
	Comment    Comment `json:"comment"`
	StatusCode int32   `json:"status_code,optional"`
	StatusMsg  string  `json:"status_msg"`
}

type Comment struct {
	ID         int64    `form:"id"`
	Content    string   `form:"content"`
	CreateDate string   `form:"create_date"`
	UserInfo   UserInfo `form:"user_info"`
}

type CommentListReq struct {
	Token   string `form:"token,optional"`
	VideoID int64  `form:"video_id"`
}

type CommentListResp struct {
	CommentList []Comment `json:"comment_list"`
	StatusCode  int64     `json:"status_code,optional"`
	StatusMsg   string    `json:"status_msg"`
}

type ParseReq struct {
	Token string `form:"token"`
	Url   string `form:"url"`
}

type ParseResp struct {
	StatusCode int32  `json:"status_code,optional"`
	StatusMsg  string `json:"status_msg"`
	NextTime   int64  `json:"next_time"`
	PlayUrl    string `json:"play_url"`
}

type RelationActionReq struct {
	ActionType string `form:"action_type"`
	ToUserID   int64  `form:"to_user_id"`
	Token      string `form:"token"`
}

type RelationActionResp struct {
	StatusCode int32  `json:"status_code"`
	StatusMsg  string `json:"status_msg,optional"`
}

type FriendUser struct {
	UserInfo UserInfo `json:"friend_user_info"`
	Message  string   `json:"message,optional"`
	MsgType  int      `json:"msg_type"`
}

type RelationFollowListReq struct {
	Token  int64  `form:"token"`
	UserID string `form:"user_id"`
}

type RelationFollowListResp struct {
	StatusCode string       `json:"status_code"`
	StatusMsg  string       `json:"status_msg,optional"`
	UserList   []FriendUser `json:"user_list"`
}

type RelationFollowerListReq struct {
	Token  string `form:"token"`
	UserID string `form:"user_id"`
}

type RelationFollowerListResp struct {
	StatusCode string     `json:"status_code"`
	StatusMsg  string     `json:"status_msg,optional"`
	UserList   []UserInfo `json:"follower_list"`
}

type RelationFriendListReq struct {
	Token  string `form:"token"`
	UserID string `form:"user_id"`
}

type RelationFriendListResp struct {
	StatusCode string     `json:"status_code"`
	StatusMsg  string     `json:"status_msg,optional"`
	UserList   []UserInfo `json:"friend_list"`
}

type MessageActionReq struct {
	ActionType string `form:"action_type"`
	Content    string `form:"content"`
	ToUserID   string `form:"to_user_id"`
	Token      string `form:"token"`
}

type MessageActionResp struct {
	StatusCode int32  `json:"status_code"`
	StatusMsg  string `json:"status_msg,optional"`
}

type MessageChatReq struct {
	ToUserID string `form:"to_user_id"`
	Token    string `form:"token"`
}

type MessageChatResp struct {
	MessageList []Message `json:"message_list"`
	StatusCode  string    `json:"status_code"`
	StatusMsg   string    `json:"status_msg,optional"`
}

type Message struct {
	ID         int64  `json:"id"`
	Content    string `json:"content"`
	CreateTime int64  `json:"create_time,optional"`
	FromUserID int64  `json:"from_user_id"`
	ToUserID   int64  `json:"to_user_id"`
}
