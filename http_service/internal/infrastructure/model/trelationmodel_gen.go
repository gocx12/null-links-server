// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tRelationFieldNames          = builder.RawFieldNames(&TRelation{})
	tRelationRows                = strings.Join(tRelationFieldNames, ",")
	tRelationRowsExpectAutoSet   = strings.Join(stringx.Remove(tRelationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tRelationRowsWithPlaceHolder = strings.Join(stringx.Remove(tRelationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tRelationModel interface {
		Insert(ctx context.Context, data *TRelation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TRelation, error)
		Update(ctx context.Context, data *TRelation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTRelationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TRelation struct {
		Id         int64     `db:"id"`          // 主键id
		FollowId   int64     `db:"follow_id"`   // 关注id
		FollowerId int64     `db:"follower_id"` // 粉丝id
		Status     int64     `db:"status"`      // 在库状态
		CreatedAt  time.Time `db:"created_at"`  // 创建时间
		UpdatedAt  time.Time `db:"updated_at"`  // 更新时间
	}
)

func newTRelationModel(conn sqlx.SqlConn) *defaultTRelationModel {
	return &defaultTRelationModel{
		conn:  conn,
		table: "`t_relation`",
	}
}

func (m *defaultTRelationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTRelationModel) FindOne(ctx context.Context, id int64) (*TRelation, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tRelationRows, m.table)
	var resp TRelation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTRelationModel) Insert(ctx context.Context, data *TRelation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, tRelationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.FollowId, data.FollowerId, data.Status)
	return ret, err
}

func (m *defaultTRelationModel) Update(ctx context.Context, data *TRelation) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tRelationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.FollowId, data.FollowerId, data.Status, data.Id)
	return err
}

func (m *defaultTRelationModel) tableName() string {
	return m.table
}
