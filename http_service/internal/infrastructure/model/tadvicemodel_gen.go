// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tAdviceFieldNames          = builder.RawFieldNames(&TAdvice{})
	tAdviceRows                = strings.Join(tAdviceFieldNames, ",")
	tAdviceRowsExpectAutoSet   = strings.Join(stringx.Remove(tAdviceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tAdviceRowsWithPlaceHolder = strings.Join(stringx.Remove(tAdviceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tAdviceModel interface {
		Insert(ctx context.Context, data *TAdvice) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TAdvice, error)
		Update(ctx context.Context, data *TAdvice) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTAdviceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TAdvice struct {
		Id          int64     `db:"id"`           // 主键id
		UserId      int64     `db:"user_id"`      // 用户id
		Advice      string    `db:"advice"`       // 建议内容
		PicUrl      string    `db:"pic_url"`      // 图片地址
		ContactInfo string    `db:"contact_info"` // 联系方式
		Status      int64     `db:"status"`       // 状态
		CreatedAt   time.Time `db:"created_at"`   // 创建时间
		UpdatedAt   time.Time `db:"updated_at"`   // 更新时间
	}
)

func newTAdviceModel(conn sqlx.SqlConn) *defaultTAdviceModel {
	return &defaultTAdviceModel{
		conn:  conn,
		table: "`t_advice`",
	}
}

func (m *defaultTAdviceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTAdviceModel) FindOne(ctx context.Context, id int64) (*TAdvice, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tAdviceRows, m.table)
	var resp TAdvice
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTAdviceModel) Insert(ctx context.Context, data *TAdvice) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, tAdviceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Advice, data.PicUrl, data.ContactInfo, data.Status)
	return ret, err
}

func (m *defaultTAdviceModel) Update(ctx context.Context, data *TAdvice) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tAdviceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Advice, data.PicUrl, data.ContactInfo, data.Status, data.Id)
	return err
}

func (m *defaultTAdviceModel) tableName() string {
	return m.table
}
