// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tPayHistoryFieldNames          = builder.RawFieldNames(&TPayHistory{})
	tPayHistoryRows                = strings.Join(tPayHistoryFieldNames, ",")
	tPayHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(tPayHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tPayHistoryRowsWithPlaceHolder = strings.Join(stringx.Remove(tPayHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tPayHistoryModel interface {
		Insert(ctx context.Context, data *TPayHistory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TPayHistory, error)
		Update(ctx context.Context, data *TPayHistory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTPayHistoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TPayHistory struct {
		Id         int64     `db:"id"`          // 主键id
		UserId     string    `db:"user_id"`     // 用户名
		Amount     int64     `db:"amount"`      // 金额
		BusinessId string    `db:"business_id"` // 业务id
		CreatedAt  time.Time `db:"created_at"`  // 创建时间
	}
)

func newTPayHistoryModel(conn sqlx.SqlConn) *defaultTPayHistoryModel {
	return &defaultTPayHistoryModel{
		conn:  conn,
		table: "`t_pay_history`",
	}
}

func (m *defaultTPayHistoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTPayHistoryModel) FindOne(ctx context.Context, id int64) (*TPayHistory, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tPayHistoryRows, m.table)
	var resp TPayHistory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTPayHistoryModel) Insert(ctx context.Context, data *TPayHistory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, tPayHistoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Amount, data.BusinessId)
	return ret, err
}

func (m *defaultTPayHistoryModel) Update(ctx context.Context, data *TPayHistory) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tPayHistoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Amount, data.BusinessId, data.Id)
	return err
}

func (m *defaultTPayHistoryModel) tableName() string {
	return m.table
}
