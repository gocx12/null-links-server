// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tTopicFieldNames          = builder.RawFieldNames(&TTopic{})
	tTopicRows                = strings.Join(tTopicFieldNames, ",")
	tTopicRowsExpectAutoSet   = strings.Join(stringx.Remove(tTopicFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tTopicRowsWithPlaceHolder = strings.Join(stringx.Remove(tTopicFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tTopicModel interface {
		Insert(ctx context.Context, data *TTopic) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TTopic, error)
		Update(ctx context.Context, data *TTopic) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTTopicModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TTopic struct {
		Id        int64     `db:"id"`         // 主键id
		Status    int64     `db:"status"`     // 在库状态
		CreatedAt time.Time `db:"created_at"` // 创建时间
		UpdatedAt time.Time `db:"updated_at"` // 更新时间
	}
)

func newTTopicModel(conn sqlx.SqlConn) *defaultTTopicModel {
	return &defaultTTopicModel{
		conn:  conn,
		table: "`t_topic`",
	}
}

func (m *defaultTTopicModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTTopicModel) FindOne(ctx context.Context, id int64) (*TTopic, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tTopicRows, m.table)
	var resp TTopic
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTTopicModel) Insert(ctx context.Context, data *TTopic) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, tTopicRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Status)
	return ret, err
}

func (m *defaultTTopicModel) Update(ctx context.Context, data *TTopic) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tTopicRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Status, data.Id)
	return err
}

func (m *defaultTTopicModel) tableName() string {
	return m.table
}
