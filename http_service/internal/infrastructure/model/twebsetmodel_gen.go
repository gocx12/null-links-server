// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tWebsetFieldNames          = builder.RawFieldNames(&TWebset{})
	tWebsetRows                = strings.Join(tWebsetFieldNames, ",")
	tWebsetRowsExpectAutoSet   = strings.Join(stringx.Remove(tWebsetFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tWebsetRowsWithPlaceHolder = strings.Join(stringx.Remove(tWebsetFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tWebsetModel interface {
		Insert(ctx context.Context, data *TWebset) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TWebset, error)
		Update(ctx context.Context, data *TWebset) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTWebsetModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TWebset struct {
		Id          int64     `db:"id"`           // 主键id
		Title       string    `db:"title"`        // 标题
		AuthorId    int64     `db:"author_id"`    // 作者id
		Description string    `db:"description"`  // 描述
		CoverUrl    string    `db:"cover_url"`    // 封面地址
		Category    int64     `db:"category"`     // 分区
		ViewCnt     int64     `db:"view_cnt"`     // 观看数
		LikeCnt     int64     `db:"like_cnt"`     // 点赞数
		FavoriteCnt int64     `db:"favorite_cnt"` // 收藏数
		Status      int64     `db:"status"`       // 在库状态
		CreatedAt   time.Time `db:"created_at"`   // 创建时间
		UpdatedAt   time.Time `db:"updated_at"`   // 更新时间
	}
)

func newTWebsetModel(conn sqlx.SqlConn) *defaultTWebsetModel {
	return &defaultTWebsetModel{
		conn:  conn,
		table: "`t_webset`",
	}
}

func (m *defaultTWebsetModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTWebsetModel) FindOne(ctx context.Context, id int64) (*TWebset, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tWebsetRows, m.table)
	var resp TWebset
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTWebsetModel) Insert(ctx context.Context, data *TWebset) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tWebsetRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Title, data.AuthorId, data.Description, data.CoverUrl, data.Category, data.ViewCnt, data.LikeCnt, data.FavoriteCnt, data.Status)
	return ret, err
}

func (m *defaultTWebsetModel) Update(ctx context.Context, data *TWebset) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tWebsetRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Title, data.AuthorId, data.Description, data.CoverUrl, data.Category, data.ViewCnt, data.LikeCnt, data.FavoriteCnt, data.Status, data.Id)
	return err
}

func (m *defaultTWebsetModel) tableName() string {
	return m.table
}
