// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tLikeFieldNames          = builder.RawFieldNames(&TLike{})
	tLikeRows                = strings.Join(tLikeFieldNames, ",")
	tLikeRowsExpectAutoSet   = strings.Join(stringx.Remove(tLikeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tLikeRowsWithPlaceHolder = strings.Join(stringx.Remove(tLikeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tLikeModel interface {
		Insert(ctx context.Context, data *TLike) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TLike, error)
		Update(ctx context.Context, data *TLike) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTLikeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TLike struct {
		Id        int64        `db:"id"`         // 主键id
		UserId    int64        `db:"user_id"`    // 用户id
		WebsetId  int64        `db:"webset_id"`  // 网页单id
		Status    int64        `db:"status"`     // 在库状态
		CreatedAt time.Time    `db:"created_at"` // 创建时间
		UpdatedAt time.Time    `db:"updated_at"` // 更新时间
		DeletedAt sql.NullTime `db:"deleted_at"` // 删除时间
	}
)

func newTLikeModel(conn sqlx.SqlConn) *defaultTLikeModel {
	return &defaultTLikeModel{
		conn:  conn,
		table: "`t_like`",
	}
}

func (m *defaultTLikeModel) withSession(session sqlx.Session) *defaultTLikeModel {
	return &defaultTLikeModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`t_like`",
	}
}

func (m *defaultTLikeModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTLikeModel) FindOne(ctx context.Context, id int64) (*TLike, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tLikeRows, m.table)
	var resp TLike
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTLikeModel) Insert(ctx context.Context, data *TLike) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, tLikeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.WebsetId, data.Status, data.DeletedAt)
	return ret, err
}

func (m *defaultTLikeModel) Update(ctx context.Context, data *TLike) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tLikeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.WebsetId, data.Status, data.DeletedAt, data.Id)
	return err
}

func (m *defaultTLikeModel) tableName() string {
	return m.table
}
