// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tBalanceFieldNames          = builder.RawFieldNames(&TBalance{})
	tBalanceRows                = strings.Join(tBalanceFieldNames, ",")
	tBalanceRowsExpectAutoSet   = strings.Join(stringx.Remove(tBalanceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tBalanceRowsWithPlaceHolder = strings.Join(stringx.Remove(tBalanceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tBalanceModel interface {
		Insert(ctx context.Context, data *TBalance) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TBalance, error)
		Update(ctx context.Context, data *TBalance) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTBalanceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TBalance struct {
		Id        int64     `db:"id"`         // 主键id
		UserId    string    `db:"user_id"`    // 用户名
		Amount    int64     `db:"amount"`     // 金额
		CreatedAt time.Time `db:"created_at"` // 创建时间
		UpdatedAt time.Time `db:"updated_at"` // 更新时间
	}
)

func newTBalanceModel(conn sqlx.SqlConn) *defaultTBalanceModel {
	return &defaultTBalanceModel{
		conn:  conn,
		table: "`t_balance`",
	}
}

func (m *defaultTBalanceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTBalanceModel) FindOne(ctx context.Context, id int64) (*TBalance, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tBalanceRows, m.table)
	var resp TBalance
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTBalanceModel) Insert(ctx context.Context, data *TBalance) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, tBalanceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Amount)
	return ret, err
}

func (m *defaultTBalanceModel) Update(ctx context.Context, data *TBalance) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tBalanceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Amount, data.Id)
	return err
}

func (m *defaultTBalanceModel) tableName() string {
	return m.table
}
