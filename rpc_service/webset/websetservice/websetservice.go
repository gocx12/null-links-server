// Code generated by goctl. DO NOT EDIT.
// Source: webset.proto

package websetservice

import (
	"context"

	"null-links/rpc_service/webset/pb/webset"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FavoriteActionReq  = webset.FavoriteActionReq
	FavoriteActionResp = webset.FavoriteActionResp
	FavoriteListReq    = webset.FavoriteListReq
	FavoriteListResp   = webset.FavoriteListResp
	FeedReq            = webset.FeedReq
	FeedResp           = webset.FeedResp
	LikeActionReq      = webset.LikeActionReq
	LikeActionResp     = webset.LikeActionResp
	LikeInfo           = webset.LikeInfo
	LikeInfoListReq    = webset.LikeInfoListReq
	LikeInfoListResp   = webset.LikeInfoListResp
	PublishActionReq   = webset.PublishActionReq
	PublishActionResp  = webset.PublishActionResp
	PublishListReq     = webset.PublishListReq
	PublishListResp    = webset.PublishListResp
	UserInfo           = webset.UserInfo
	UserInfoShort      = webset.UserInfoShort
	WebLink            = webset.WebLink
	Webset             = webset.Webset
	WebsetShort        = webset.WebsetShort

	WebsetService interface {
		Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error)
		PublishAction(ctx context.Context, in *PublishActionReq, opts ...grpc.CallOption) (*PublishActionResp, error)
		PublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error)
		LikeAction(ctx context.Context, in *LikeActionReq, opts ...grpc.CallOption) (*LikeActionResp, error)
		LikeInfoList(ctx context.Context, in *LikeInfoListReq, opts ...grpc.CallOption) (*LikeInfoListResp, error)
		FavoriteAction(ctx context.Context, in *FavoriteActionReq, opts ...grpc.CallOption) (*FavoriteActionResp, error)
		FavoriteList(ctx context.Context, in *FavoriteListReq, opts ...grpc.CallOption) (*FavoriteListResp, error)
	}

	defaultWebsetService struct {
		cli zrpc.Client
	}
)

func NewWebsetService(cli zrpc.Client) WebsetService {
	return &defaultWebsetService{
		cli: cli,
	}
}

func (m *defaultWebsetService) Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error) {
	client := webset.NewWebsetServiceClient(m.cli.Conn())
	return client.Feed(ctx, in, opts...)
}

func (m *defaultWebsetService) PublishAction(ctx context.Context, in *PublishActionReq, opts ...grpc.CallOption) (*PublishActionResp, error) {
	client := webset.NewWebsetServiceClient(m.cli.Conn())
	return client.PublishAction(ctx, in, opts...)
}

func (m *defaultWebsetService) PublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error) {
	client := webset.NewWebsetServiceClient(m.cli.Conn())
	return client.PublishList(ctx, in, opts...)
}

func (m *defaultWebsetService) LikeAction(ctx context.Context, in *LikeActionReq, opts ...grpc.CallOption) (*LikeActionResp, error) {
	client := webset.NewWebsetServiceClient(m.cli.Conn())
	return client.LikeAction(ctx, in, opts...)
}

func (m *defaultWebsetService) LikeInfoList(ctx context.Context, in *LikeInfoListReq, opts ...grpc.CallOption) (*LikeInfoListResp, error) {
	client := webset.NewWebsetServiceClient(m.cli.Conn())
	return client.LikeInfoList(ctx, in, opts...)
}

func (m *defaultWebsetService) FavoriteAction(ctx context.Context, in *FavoriteActionReq, opts ...grpc.CallOption) (*FavoriteActionResp, error) {
	client := webset.NewWebsetServiceClient(m.cli.Conn())
	return client.FavoriteAction(ctx, in, opts...)
}

func (m *defaultWebsetService) FavoriteList(ctx context.Context, in *FavoriteListReq, opts ...grpc.CallOption) (*FavoriteListResp, error) {
	client := webset.NewWebsetServiceClient(m.cli.Conn())
	return client.FavoriteList(ctx, in, opts...)
}
