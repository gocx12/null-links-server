// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: rpc_service/webset/webset.proto

package webset

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebsetService_Feed_FullMethodName           = "/webset.WebsetService/Feed"
	WebsetService_PublishAction_FullMethodName  = "/webset.WebsetService/PublishAction"
	WebsetService_PublishList_FullMethodName    = "/webset.WebsetService/PublishList"
	WebsetService_LikeAction_FullMethodName     = "/webset.WebsetService/LikeAction"
	WebsetService_LikeInfoList_FullMethodName   = "/webset.WebsetService/LikeInfoList"
	WebsetService_FavoriteAction_FullMethodName = "/webset.WebsetService/FavoriteAction"
	WebsetService_FavoriteList_FullMethodName   = "/webset.WebsetService/FavoriteList"
)

// WebsetServiceClient is the client API for WebsetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebsetServiceClient interface {
	Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error)
	PublishAction(ctx context.Context, in *PublishActionReq, opts ...grpc.CallOption) (*PublishActionResp, error)
	PublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error)
	LikeAction(ctx context.Context, in *LikeActionReq, opts ...grpc.CallOption) (*LikeActionResp, error)
	LikeInfoList(ctx context.Context, in *LikeInfoListReq, opts ...grpc.CallOption) (*LikeInfoListResp, error)
	FavoriteAction(ctx context.Context, in *FavoriteActionReq, opts ...grpc.CallOption) (*FavoriteActionResp, error)
	FavoriteList(ctx context.Context, in *FavoriteListReq, opts ...grpc.CallOption) (*FavoriteListResp, error)
}

type websetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebsetServiceClient(cc grpc.ClientConnInterface) WebsetServiceClient {
	return &websetServiceClient{cc}
}

func (c *websetServiceClient) Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error) {
	out := new(FeedResp)
	err := c.cc.Invoke(ctx, WebsetService_Feed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websetServiceClient) PublishAction(ctx context.Context, in *PublishActionReq, opts ...grpc.CallOption) (*PublishActionResp, error) {
	out := new(PublishActionResp)
	err := c.cc.Invoke(ctx, WebsetService_PublishAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websetServiceClient) PublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error) {
	out := new(PublishListResp)
	err := c.cc.Invoke(ctx, WebsetService_PublishList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websetServiceClient) LikeAction(ctx context.Context, in *LikeActionReq, opts ...grpc.CallOption) (*LikeActionResp, error) {
	out := new(LikeActionResp)
	err := c.cc.Invoke(ctx, WebsetService_LikeAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websetServiceClient) LikeInfoList(ctx context.Context, in *LikeInfoListReq, opts ...grpc.CallOption) (*LikeInfoListResp, error) {
	out := new(LikeInfoListResp)
	err := c.cc.Invoke(ctx, WebsetService_LikeInfoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websetServiceClient) FavoriteAction(ctx context.Context, in *FavoriteActionReq, opts ...grpc.CallOption) (*FavoriteActionResp, error) {
	out := new(FavoriteActionResp)
	err := c.cc.Invoke(ctx, WebsetService_FavoriteAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websetServiceClient) FavoriteList(ctx context.Context, in *FavoriteListReq, opts ...grpc.CallOption) (*FavoriteListResp, error) {
	out := new(FavoriteListResp)
	err := c.cc.Invoke(ctx, WebsetService_FavoriteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebsetServiceServer is the server API for WebsetService service.
// All implementations must embed UnimplementedWebsetServiceServer
// for forward compatibility
type WebsetServiceServer interface {
	Feed(context.Context, *FeedReq) (*FeedResp, error)
	PublishAction(context.Context, *PublishActionReq) (*PublishActionResp, error)
	PublishList(context.Context, *PublishListReq) (*PublishListResp, error)
	LikeAction(context.Context, *LikeActionReq) (*LikeActionResp, error)
	LikeInfoList(context.Context, *LikeInfoListReq) (*LikeInfoListResp, error)
	FavoriteAction(context.Context, *FavoriteActionReq) (*FavoriteActionResp, error)
	FavoriteList(context.Context, *FavoriteListReq) (*FavoriteListResp, error)
	mustEmbedUnimplementedWebsetServiceServer()
}

// UnimplementedWebsetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebsetServiceServer struct {
}

func (UnimplementedWebsetServiceServer) Feed(context.Context, *FeedReq) (*FeedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feed not implemented")
}
func (UnimplementedWebsetServiceServer) PublishAction(context.Context, *PublishActionReq) (*PublishActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishAction not implemented")
}
func (UnimplementedWebsetServiceServer) PublishList(context.Context, *PublishListReq) (*PublishListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishList not implemented")
}
func (UnimplementedWebsetServiceServer) LikeAction(context.Context, *LikeActionReq) (*LikeActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeAction not implemented")
}
func (UnimplementedWebsetServiceServer) LikeInfoList(context.Context, *LikeInfoListReq) (*LikeInfoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeInfoList not implemented")
}
func (UnimplementedWebsetServiceServer) FavoriteAction(context.Context, *FavoriteActionReq) (*FavoriteActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteAction not implemented")
}
func (UnimplementedWebsetServiceServer) FavoriteList(context.Context, *FavoriteListReq) (*FavoriteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteList not implemented")
}
func (UnimplementedWebsetServiceServer) mustEmbedUnimplementedWebsetServiceServer() {}

// UnsafeWebsetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebsetServiceServer will
// result in compilation errors.
type UnsafeWebsetServiceServer interface {
	mustEmbedUnimplementedWebsetServiceServer()
}

func RegisterWebsetServiceServer(s grpc.ServiceRegistrar, srv WebsetServiceServer) {
	s.RegisterService(&WebsetService_ServiceDesc, srv)
}

func _WebsetService_Feed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsetServiceServer).Feed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsetService_Feed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsetServiceServer).Feed(ctx, req.(*FeedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsetService_PublishAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsetServiceServer).PublishAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsetService_PublishAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsetServiceServer).PublishAction(ctx, req.(*PublishActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsetService_PublishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsetServiceServer).PublishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsetService_PublishList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsetServiceServer).PublishList(ctx, req.(*PublishListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsetService_LikeAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsetServiceServer).LikeAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsetService_LikeAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsetServiceServer).LikeAction(ctx, req.(*LikeActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsetService_LikeInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeInfoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsetServiceServer).LikeInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsetService_LikeInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsetServiceServer).LikeInfoList(ctx, req.(*LikeInfoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsetService_FavoriteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsetServiceServer).FavoriteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsetService_FavoriteAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsetServiceServer).FavoriteAction(ctx, req.(*FavoriteActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsetService_FavoriteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsetServiceServer).FavoriteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsetService_FavoriteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsetServiceServer).FavoriteList(ctx, req.(*FavoriteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WebsetService_ServiceDesc is the grpc.ServiceDesc for WebsetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebsetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webset.WebsetService",
	HandlerType: (*WebsetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Feed",
			Handler:    _WebsetService_Feed_Handler,
		},
		{
			MethodName: "PublishAction",
			Handler:    _WebsetService_PublishAction_Handler,
		},
		{
			MethodName: "PublishList",
			Handler:    _WebsetService_PublishList_Handler,
		},
		{
			MethodName: "LikeAction",
			Handler:    _WebsetService_LikeAction_Handler,
		},
		{
			MethodName: "LikeInfoList",
			Handler:    _WebsetService_LikeInfoList_Handler,
		},
		{
			MethodName: "FavoriteAction",
			Handler:    _WebsetService_FavoriteAction_Handler,
		},
		{
			MethodName: "FavoriteList",
			Handler:    _WebsetService_FavoriteList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_service/webset/webset.proto",
}
