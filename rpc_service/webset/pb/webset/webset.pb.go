// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.6.1
// source: rpc_service/webset/webset.proto

package webset

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Page     int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *FeedReq) Reset() {
	*x = FeedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedReq) ProtoMessage() {}

func (x *FeedReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedReq.ProtoReflect.Descriptor instead.
func (*FeedReq) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{0}
}

func (x *FeedReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FeedReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FeedReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type FeedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32          `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg  string         `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	WebsetList []*WebsetShort `protobuf:"bytes,3,rep,name=webset_list,json=websetList,proto3" json:"webset_list,omitempty"`
}

func (x *FeedResp) Reset() {
	*x = FeedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedResp) ProtoMessage() {}

func (x *FeedResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedResp.ProtoReflect.Descriptor instead.
func (*FeedResp) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{1}
}

func (x *FeedResp) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FeedResp) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *FeedResp) GetWebsetList() []*WebsetShort {
	if x != nil {
		return x.WebsetList
	}
	return nil
}

type PublishActionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType int32   `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	UserId     int64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WebsetId   int64   `protobuf:"varint,3,opt,name=webset_id,json=websetId,proto3" json:"webset_id,omitempty"`
	Webset     *Webset `protobuf:"bytes,4,opt,name=webset,proto3" json:"webset,omitempty"`
}

func (x *PublishActionReq) Reset() {
	*x = PublishActionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishActionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishActionReq) ProtoMessage() {}

func (x *PublishActionReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishActionReq.ProtoReflect.Descriptor instead.
func (*PublishActionReq) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{2}
}

func (x *PublishActionReq) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *PublishActionReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PublishActionReq) GetWebsetId() int64 {
	if x != nil {
		return x.WebsetId
	}
	return 0
}

func (x *PublishActionReq) GetWebset() *Webset {
	if x != nil {
		return x.Webset
	}
	return nil
}

type PublishActionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg  string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
}

func (x *PublishActionResp) Reset() {
	*x = PublishActionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishActionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishActionResp) ProtoMessage() {}

func (x *PublishActionResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishActionResp.ProtoReflect.Descriptor instead.
func (*PublishActionResp) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{3}
}

func (x *PublishActionResp) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *PublishActionResp) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

type PublishListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Page     int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *PublishListReq) Reset() {
	*x = PublishListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishListReq) ProtoMessage() {}

func (x *PublishListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishListReq.ProtoReflect.Descriptor instead.
func (*PublishListReq) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{4}
}

func (x *PublishListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PublishListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PublishListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type PublishListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32          `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg  string         `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	WebsetList []*WebsetShort `protobuf:"bytes,3,rep,name=webset_list,json=websetList,proto3" json:"webset_list,omitempty"`
}

func (x *PublishListResp) Reset() {
	*x = PublishListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishListResp) ProtoMessage() {}

func (x *PublishListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishListResp.ProtoReflect.Descriptor instead.
func (*PublishListResp) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{5}
}

func (x *PublishListResp) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *PublishListResp) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *PublishListResp) GetWebsetList() []*WebsetShort {
	if x != nil {
		return x.WebsetList
	}
	return nil
}

type LikeActionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ActionType int32 `protobuf:"varint,2,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	WebsetId   int64 `protobuf:"varint,3,opt,name=webset_id,json=websetId,proto3" json:"webset_id,omitempty"`
}

func (x *LikeActionReq) Reset() {
	*x = LikeActionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeActionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeActionReq) ProtoMessage() {}

func (x *LikeActionReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeActionReq.ProtoReflect.Descriptor instead.
func (*LikeActionReq) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{6}
}

func (x *LikeActionReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LikeActionReq) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *LikeActionReq) GetWebsetId() int64 {
	if x != nil {
		return x.WebsetId
	}
	return 0
}

type LikeActionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg  string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
}

func (x *LikeActionResp) Reset() {
	*x = LikeActionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeActionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeActionResp) ProtoMessage() {}

func (x *LikeActionResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeActionResp.ProtoReflect.Descriptor instead.
func (*LikeActionResp) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{7}
}

func (x *LikeActionResp) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *LikeActionResp) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

type LikeInfoListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WebsetIdList []int64 `protobuf:"varint,2,rep,packed,name=webset_id_list,json=websetIdList,proto3" json:"webset_id_list,omitempty"`
}

func (x *LikeInfoListReq) Reset() {
	*x = LikeInfoListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeInfoListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeInfoListReq) ProtoMessage() {}

func (x *LikeInfoListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeInfoListReq.ProtoReflect.Descriptor instead.
func (*LikeInfoListReq) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{8}
}

func (x *LikeInfoListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LikeInfoListReq) GetWebsetIdList() []int64 {
	if x != nil {
		return x.WebsetIdList
	}
	return nil
}

type LikeInfoListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode   int32       `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg    string      `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	LikeInfoList []*LikeInfo `protobuf:"bytes,3,rep,name=like_info_list,json=likeInfoList,proto3" json:"like_info_list,omitempty"`
}

func (x *LikeInfoListResp) Reset() {
	*x = LikeInfoListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeInfoListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeInfoListResp) ProtoMessage() {}

func (x *LikeInfoListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeInfoListResp.ProtoReflect.Descriptor instead.
func (*LikeInfoListResp) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{9}
}

func (x *LikeInfoListResp) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *LikeInfoListResp) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *LikeInfoListResp) GetLikeInfoList() []*LikeInfo {
	if x != nil {
		return x.LikeInfoList
	}
	return nil
}

type LikeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebsetId  int64 `protobuf:"varint,1,opt,name=webset_id,json=websetId,proto3" json:"webset_id,omitempty"`
	LikeCount int64 `protobuf:"varint,2,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	IsLike    bool  `protobuf:"varint,3,opt,name=is_like,json=isLike,proto3" json:"is_like,omitempty"`
}

func (x *LikeInfo) Reset() {
	*x = LikeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeInfo) ProtoMessage() {}

func (x *LikeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeInfo.ProtoReflect.Descriptor instead.
func (*LikeInfo) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{10}
}

func (x *LikeInfo) GetWebsetId() int64 {
	if x != nil {
		return x.WebsetId
	}
	return 0
}

func (x *LikeInfo) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *LikeInfo) GetIsLike() bool {
	if x != nil {
		return x.IsLike
	}
	return false
}

type FavoriteActionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WebsetId int64 `protobuf:"varint,2,opt,name=webset_id,json=websetId,proto3" json:"webset_id,omitempty"`
}

func (x *FavoriteActionReq) Reset() {
	*x = FavoriteActionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteActionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteActionReq) ProtoMessage() {}

func (x *FavoriteActionReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteActionReq.ProtoReflect.Descriptor instead.
func (*FavoriteActionReq) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{11}
}

func (x *FavoriteActionReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FavoriteActionReq) GetWebsetId() int64 {
	if x != nil {
		return x.WebsetId
	}
	return 0
}

type FavoriteActionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg  string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
}

func (x *FavoriteActionResp) Reset() {
	*x = FavoriteActionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteActionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteActionResp) ProtoMessage() {}

func (x *FavoriteActionResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteActionResp.ProtoReflect.Descriptor instead.
func (*FavoriteActionResp) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{12}
}

func (x *FavoriteActionResp) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FavoriteActionResp) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

type FavoriteListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *FavoriteListReq) Reset() {
	*x = FavoriteListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteListReq) ProtoMessage() {}

func (x *FavoriteListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteListReq.ProtoReflect.Descriptor instead.
func (*FavoriteListReq) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{13}
}

func (x *FavoriteListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type FavoriteListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode         int32          `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg          string         `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	FavoriteWebsetList []*WebsetShort `protobuf:"bytes,3,rep,name=favorite_webset_list,json=favoriteWebsetList,proto3" json:"favorite_webset_list,omitempty"`
}

func (x *FavoriteListResp) Reset() {
	*x = FavoriteListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteListResp) ProtoMessage() {}

func (x *FavoriteListResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteListResp.ProtoReflect.Descriptor instead.
func (*FavoriteListResp) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{14}
}

func (x *FavoriteListResp) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FavoriteListResp) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *FavoriteListResp) GetFavoriteWebsetList() []*WebsetShort {
	if x != nil {
		return x.FavoriteWebsetList
	}
	return nil
}

type WebsetInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WebsetId int64 `protobuf:"varint,2,opt,name=webset_id,json=websetId,proto3" json:"webset_id,omitempty"`
}

func (x *WebsetInfoReq) Reset() {
	*x = WebsetInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsetInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsetInfoReq) ProtoMessage() {}

func (x *WebsetInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsetInfoReq.ProtoReflect.Descriptor instead.
func (*WebsetInfoReq) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{15}
}

func (x *WebsetInfoReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WebsetInfoReq) GetWebsetId() int64 {
	if x != nil {
		return x.WebsetId
	}
	return 0
}

type WebsetInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32   `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg  string  `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	Webset     *Webset `protobuf:"bytes,3,opt,name=webset,proto3" json:"webset,omitempty"`
}

func (x *WebsetInfoResp) Reset() {
	*x = WebsetInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsetInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsetInfoResp) ProtoMessage() {}

func (x *WebsetInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsetInfoResp.ProtoReflect.Descriptor instead.
func (*WebsetInfoResp) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{16}
}

func (x *WebsetInfoResp) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *WebsetInfoResp) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *WebsetInfoResp) GetWebset() *Webset {
	if x != nil {
		return x.Webset
	}
	return nil
}

type WebsetShort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string         `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	AuthorInfo    *UserInfoShort `protobuf:"bytes,3,opt,name=author_info,json=authorInfo,proto3" json:"author_info,omitempty"`
	CoverUrl      string         `protobuf:"bytes,4,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	ViewCount     int64          `protobuf:"varint,5,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	LikeCount     int64          `protobuf:"varint,6,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	IsLike        bool           `protobuf:"varint,7,opt,name=is_like,json=isLike,proto3" json:"is_like,omitempty"`
	FavoriteCount int64          `protobuf:"varint,8,opt,name=favorite_count,json=favoriteCount,proto3" json:"favorite_count,omitempty"`
	IsFavorite    bool           `protobuf:"varint,9,opt,name=is_favorite,json=isFavorite,proto3" json:"is_favorite,omitempty"`
}

func (x *WebsetShort) Reset() {
	*x = WebsetShort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebsetShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsetShort) ProtoMessage() {}

func (x *WebsetShort) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsetShort.ProtoReflect.Descriptor instead.
func (*WebsetShort) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{17}
}

func (x *WebsetShort) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebsetShort) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WebsetShort) GetAuthorInfo() *UserInfoShort {
	if x != nil {
		return x.AuthorInfo
	}
	return nil
}

func (x *WebsetShort) GetCoverUrl() string {
	if x != nil {
		return x.CoverUrl
	}
	return ""
}

func (x *WebsetShort) GetViewCount() int64 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *WebsetShort) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *WebsetShort) GetIsLike() bool {
	if x != nil {
		return x.IsLike
	}
	return false
}

func (x *WebsetShort) GetFavoriteCount() int64 {
	if x != nil {
		return x.FavoriteCount
	}
	return 0
}

func (x *WebsetShort) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

type Webset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Describe      string     `protobuf:"bytes,3,opt,name=describe,proto3" json:"describe,omitempty"`
	AuthorInfo    *UserInfo  `protobuf:"bytes,4,opt,name=author_info,json=authorInfo,proto3" json:"author_info,omitempty"`
	CoverUrl      string     `protobuf:"bytes,5,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	ViewCount     int64      `protobuf:"varint,6,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	LikeCount     int64      `protobuf:"varint,7,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	IsLike        bool       `protobuf:"varint,8,opt,name=is_like,json=isLike,proto3" json:"is_like,omitempty"`
	FavoriteCount int64      `protobuf:"varint,9,opt,name=favorite_count,json=favoriteCount,proto3" json:"favorite_count,omitempty"`
	IsFavorite    bool       `protobuf:"varint,10,opt,name=is_favorite,json=isFavorite,proto3" json:"is_favorite,omitempty"`
	WebLinkList   []*WebLink `protobuf:"bytes,11,rep,name=web_link_list,json=webLinkList,proto3" json:"web_link_list,omitempty"`
}

func (x *Webset) Reset() {
	*x = Webset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Webset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Webset) ProtoMessage() {}

func (x *Webset) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Webset.ProtoReflect.Descriptor instead.
func (*Webset) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{18}
}

func (x *Webset) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Webset) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Webset) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *Webset) GetAuthorInfo() *UserInfo {
	if x != nil {
		return x.AuthorInfo
	}
	return nil
}

func (x *Webset) GetCoverUrl() string {
	if x != nil {
		return x.CoverUrl
	}
	return ""
}

func (x *Webset) GetViewCount() int64 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *Webset) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *Webset) GetIsLike() bool {
	if x != nil {
		return x.IsLike
	}
	return false
}

func (x *Webset) GetFavoriteCount() int64 {
	if x != nil {
		return x.FavoriteCount
	}
	return 0
}

func (x *Webset) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

func (x *Webset) GetWebLinkList() []*WebLink {
	if x != nil {
		return x.WebLinkList
	}
	return nil
}

type WebLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Describe   string    `protobuf:"bytes,2,opt,name=describe,proto3" json:"describe,omitempty"`
	Url        string    `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	CoverUrl   string    `protobuf:"bytes,4,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	AuthorInfo *UserInfo `protobuf:"bytes,5,opt,name=author_info,json=authorInfo,proto3" json:"author_info,omitempty"`
}

func (x *WebLink) Reset() {
	*x = WebLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebLink) ProtoMessage() {}

func (x *WebLink) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebLink.ProtoReflect.Descriptor instead.
func (*WebLink) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{19}
}

func (x *WebLink) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebLink) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *WebLink) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WebLink) GetCoverUrl() string {
	if x != nil {
		return x.CoverUrl
	}
	return ""
}

func (x *WebLink) GetAuthorInfo() *UserInfo {
	if x != nil {
		return x.AuthorInfo
	}
	return nil
}

type UserInfoShort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AvatarUrl     string `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	FollowCount   int64  `protobuf:"varint,4,opt,name=follow_count,json=followCount,proto3" json:"follow_count,omitempty"`
	FollowerCount int64  `protobuf:"varint,5,opt,name=follower_count,json=followerCount,proto3" json:"follower_count,omitempty"`
	IsFollow      bool   `protobuf:"varint,6,opt,name=is_follow,json=isFollow,proto3" json:"is_follow,omitempty"`
}

func (x *UserInfoShort) Reset() {
	*x = UserInfoShort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoShort) ProtoMessage() {}

func (x *UserInfoShort) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoShort.ProtoReflect.Descriptor instead.
func (*UserInfoShort) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{20}
}

func (x *UserInfoShort) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInfoShort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfoShort) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UserInfoShort) GetFollowCount() int64 {
	if x != nil {
		return x.FollowCount
	}
	return 0
}

func (x *UserInfoShort) GetFollowerCount() int64 {
	if x != nil {
		return x.FollowerCount
	}
	return 0
}

func (x *UserInfoShort) GetIsFollow() bool {
	if x != nil {
		return x.IsFollow
	}
	return false
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email         string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	AvatarUrl     string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	BackgroundUrl string `protobuf:"bytes,5,opt,name=background_url,json=backgroundUrl,proto3" json:"background_url,omitempty"`
	FollowCount   int64  `protobuf:"varint,6,opt,name=follow_count,json=followCount,proto3" json:"follow_count,omitempty"`
	FollowerCount int64  `protobuf:"varint,7,opt,name=follower_count,json=followerCount,proto3" json:"follower_count,omitempty"`
	IsFollow      bool   `protobuf:"varint,8,opt,name=is_follow,json=isFollow,proto3" json:"is_follow,omitempty"`
	Signature     string `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty"`
	WorkCount     int64  `protobuf:"varint,10,opt,name=work_count,json=workCount,proto3" json:"work_count,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_service_webset_webset_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_webset_webset_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_rpc_service_webset_webset_proto_rawDescGZIP(), []int{21}
}

func (x *UserInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UserInfo) GetBackgroundUrl() string {
	if x != nil {
		return x.BackgroundUrl
	}
	return ""
}

func (x *UserInfo) GetFollowCount() int64 {
	if x != nil {
		return x.FollowCount
	}
	return 0
}

func (x *UserInfo) GetFollowerCount() int64 {
	if x != nil {
		return x.FollowerCount
	}
	return 0
}

func (x *UserInfo) GetIsFollow() bool {
	if x != nil {
		return x.IsFollow
	}
	return false
}

func (x *UserInfo) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *UserInfo) GetWorkCount() int64 {
	if x != nil {
		return x.WorkCount
	}
	return 0
}

var File_rpc_service_webset_webset_proto protoreflect.FileDescriptor

var file_rpc_service_webset_webset_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x77, 0x65,
	0x62, 0x73, 0x65, 0x74, 0x2f, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x22, 0x53, 0x0a, 0x07, 0x46, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x80,
	0x01, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x0b, 0x77,
	0x65, 0x62, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x65, 0x74,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x06, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x65, 0x74, 0x52, 0x06, 0x77,
	0x65, 0x62, 0x73, 0x65, 0x74, 0x22, 0x53, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x22, 0x5a, 0x0a, 0x0e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x0b, 0x77, 0x65,
	0x62, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x65, 0x74, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x66, 0x0a, 0x0d, 0x4c, 0x69, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x65, 0x62, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x0e, 0x4c, 0x69, 0x6b, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x22, 0x50, 0x0a, 0x0f, 0x4c, 0x69,
	0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c,
	0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8a, 0x01, 0x0a,
	0x10, 0x4c, 0x69, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73,
	0x67, 0x12, 0x36, 0x0a, 0x0e, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x65, 0x62, 0x73,
	0x65, 0x74, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6c, 0x69, 0x6b,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x08, 0x4c, 0x69, 0x6b,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x22, 0x49, 0x0a, 0x11, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x65, 0x62,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x12, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x22, 0x2a, 0x0a, 0x0f, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x45, 0x0a, 0x14,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x62,
	0x73, 0x65, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52,
	0x12, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x57, 0x65, 0x62, 0x73, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x0e, 0x57, 0x65,
	0x62, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x06,
	0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x77,
	0x65, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x65, 0x74, 0x52, 0x06, 0x77, 0x65,
	0x62, 0x73, 0x65, 0x74, 0x22, 0xa7, 0x02, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x73, 0x65, 0x74, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x22, 0xee,
	0x02, 0x0a, 0x06, 0x57, 0x65, 0x62, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69,
	0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x6c, 0x69, 0x6b, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69,
	0x6b, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x77, 0x65,
	0x62, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x97, 0x01, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x31, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x65,
	0x62, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb9, 0x01, 0x0a, 0x0d, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x22, 0xae, 0x02, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x55,
	0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x89, 0x04, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x64,
	0x12, 0x0f, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x10, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x19,
	0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0b, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65,
	0x74, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x4c, 0x69, 0x6b,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74,
	0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0c, 0x4c, 0x69, 0x6b, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e,
	0x4c, 0x69, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0e, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x77, 0x65,
	0x62, 0x73, 0x65, 0x74, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x41, 0x0a, 0x0c, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x77, 0x65,
	0x62, 0x73, 0x65, 0x74, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x57, 0x65, 0x62, 0x73, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x2e, 0x57, 0x65, 0x62,
	0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x77, 0x65, 0x62,
	0x73, 0x65, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x77, 0x65, 0x62, 0x73, 0x65, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_service_webset_webset_proto_rawDescOnce sync.Once
	file_rpc_service_webset_webset_proto_rawDescData = file_rpc_service_webset_webset_proto_rawDesc
)

func file_rpc_service_webset_webset_proto_rawDescGZIP() []byte {
	file_rpc_service_webset_webset_proto_rawDescOnce.Do(func() {
		file_rpc_service_webset_webset_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_service_webset_webset_proto_rawDescData)
	})
	return file_rpc_service_webset_webset_proto_rawDescData
}

var file_rpc_service_webset_webset_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_rpc_service_webset_webset_proto_goTypes = []interface{}{
	(*FeedReq)(nil),            // 0: webset.FeedReq
	(*FeedResp)(nil),           // 1: webset.FeedResp
	(*PublishActionReq)(nil),   // 2: webset.PublishActionReq
	(*PublishActionResp)(nil),  // 3: webset.PublishActionResp
	(*PublishListReq)(nil),     // 4: webset.PublishListReq
	(*PublishListResp)(nil),    // 5: webset.PublishListResp
	(*LikeActionReq)(nil),      // 6: webset.LikeActionReq
	(*LikeActionResp)(nil),     // 7: webset.LikeActionResp
	(*LikeInfoListReq)(nil),    // 8: webset.LikeInfoListReq
	(*LikeInfoListResp)(nil),   // 9: webset.LikeInfoListResp
	(*LikeInfo)(nil),           // 10: webset.LikeInfo
	(*FavoriteActionReq)(nil),  // 11: webset.FavoriteActionReq
	(*FavoriteActionResp)(nil), // 12: webset.FavoriteActionResp
	(*FavoriteListReq)(nil),    // 13: webset.FavoriteListReq
	(*FavoriteListResp)(nil),   // 14: webset.FavoriteListResp
	(*WebsetInfoReq)(nil),      // 15: webset.WebsetInfoReq
	(*WebsetInfoResp)(nil),     // 16: webset.WebsetInfoResp
	(*WebsetShort)(nil),        // 17: webset.WebsetShort
	(*Webset)(nil),             // 18: webset.Webset
	(*WebLink)(nil),            // 19: webset.WebLink
	(*UserInfoShort)(nil),      // 20: webset.UserInfoShort
	(*UserInfo)(nil),           // 21: webset.UserInfo
}
var file_rpc_service_webset_webset_proto_depIdxs = []int32{
	17, // 0: webset.FeedResp.webset_list:type_name -> webset.WebsetShort
	18, // 1: webset.PublishActionReq.webset:type_name -> webset.Webset
	17, // 2: webset.PublishListResp.webset_list:type_name -> webset.WebsetShort
	10, // 3: webset.LikeInfoListResp.like_info_list:type_name -> webset.LikeInfo
	17, // 4: webset.FavoriteListResp.favorite_webset_list:type_name -> webset.WebsetShort
	18, // 5: webset.WebsetInfoResp.webset:type_name -> webset.Webset
	20, // 6: webset.WebsetShort.author_info:type_name -> webset.UserInfoShort
	21, // 7: webset.Webset.author_info:type_name -> webset.UserInfo
	19, // 8: webset.Webset.web_link_list:type_name -> webset.WebLink
	21, // 9: webset.WebLink.author_info:type_name -> webset.UserInfo
	0,  // 10: webset.WebsetService.Feed:input_type -> webset.FeedReq
	2,  // 11: webset.WebsetService.PublishAction:input_type -> webset.PublishActionReq
	4,  // 12: webset.WebsetService.PublishList:input_type -> webset.PublishListReq
	6,  // 13: webset.WebsetService.LikeAction:input_type -> webset.LikeActionReq
	8,  // 14: webset.WebsetService.LikeInfoList:input_type -> webset.LikeInfoListReq
	11, // 15: webset.WebsetService.FavoriteAction:input_type -> webset.FavoriteActionReq
	13, // 16: webset.WebsetService.FavoriteList:input_type -> webset.FavoriteListReq
	15, // 17: webset.WebsetService.WebsetInfo:input_type -> webset.WebsetInfoReq
	1,  // 18: webset.WebsetService.Feed:output_type -> webset.FeedResp
	3,  // 19: webset.WebsetService.PublishAction:output_type -> webset.PublishActionResp
	5,  // 20: webset.WebsetService.PublishList:output_type -> webset.PublishListResp
	7,  // 21: webset.WebsetService.LikeAction:output_type -> webset.LikeActionResp
	9,  // 22: webset.WebsetService.LikeInfoList:output_type -> webset.LikeInfoListResp
	12, // 23: webset.WebsetService.FavoriteAction:output_type -> webset.FavoriteActionResp
	14, // 24: webset.WebsetService.FavoriteList:output_type -> webset.FavoriteListResp
	16, // 25: webset.WebsetService.WebsetInfo:output_type -> webset.WebsetInfoResp
	18, // [18:26] is the sub-list for method output_type
	10, // [10:18] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_rpc_service_webset_webset_proto_init() }
func file_rpc_service_webset_webset_proto_init() {
	if File_rpc_service_webset_webset_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_service_webset_webset_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishActionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishActionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeActionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeActionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeInfoListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeInfoListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteActionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteActionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsetInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsetInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebsetShort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Webset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoShort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_service_webset_webset_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_service_webset_webset_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_service_webset_webset_proto_goTypes,
		DependencyIndexes: file_rpc_service_webset_webset_proto_depIdxs,
		MessageInfos:      file_rpc_service_webset_webset_proto_msgTypes,
	}.Build()
	File_rpc_service_webset_webset_proto = out.File
	file_rpc_service_webset_webset_proto_rawDesc = nil
	file_rpc_service_webset_webset_proto_goTypes = nil
	file_rpc_service_webset_webset_proto_depIdxs = nil
}
